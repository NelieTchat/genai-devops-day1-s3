// generated by genai_codegen.py (stable header)
provider "aws" {
  region = var.region
}

resource "aws_s3_bucket" "bucket" {
  bucket = var.bucket_name
  acl    = "private"

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_kms_master_key_id = var.kms_key_id
      }
    }
  }

  lifecycle {
    prevent_destroy = var.force_destroy
  }

  versioning {
    enabled = true
  }

  lifecycle {
    prefix = "noncurrent/"

    expire_after = 180d

    abort_incomplete_multipart_uploads = true

    transition {
      days          = 30
      storage_class = "STANDARD_IA"
    }
  }
}

resource "aws_s3_bucket_public_access_block" "block" {
  bucket = aws_s3_bucket.bucket.id

  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_policy" "deny_non_tls" {
  bucket = aws_s3_bucket.bucket.id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Deny",
        Principal = "*",
        Action = [
          "s3:GetObject",
          "s3:ListBucket"
        ],
        Resource = "${aws_s3_bucket.bucket.arn}/*",
        Condition = {
          Won'tMatch = [{
            "StringLike" = {
              "aws:SecureTransport" = ["client-side-encryption"]
            }
          }]
        }
      },
      {
        Effect   = "Deny",
        Principal = "*",
        Action    = "s3:PutObjectAcl",
        Resource  = aws_s3_bucket.bucket.arn + "/*/*",
        Condition = {
          StringNotEquals = {
            "aws:grantownership" = "BUCKET_OWNER"
          }
        }
      },
      {
        Effect = "Deny",
        Principal = "*",
        Action    = "s3:PutObjectAcl",
        Resource  = aws_s3_bucket.bucket.arn + "/*/*",
        Condition = {
          StringNotEquals = {
            "aws:acl" = "public-read"
          }
        }
      },
      {
        Effect   = "Deny",
        Principal = "*",
        Action    = [
          "s3:PutObject",
          "s3:PutObjectAcl"
        ],
        Resource  = "${aws_s3_bucket.bucket.arn}/noncurrent/*",
        Condition = {
          StringNotEquals = {
            "x-amz-server-side-encryption" = "AES256"
          }
        }
      }
    ]
  })
}

resource "aws_s3_bucket_tags" "tags" {
  bucket = aws_s3_bucket.bucket.id
  tags   = var.tags
}
