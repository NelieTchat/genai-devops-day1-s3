#!/usr/bin/env python3
import argparse, pathlib, sys, subprocess, re

ROOT = pathlib.Path(__file__).resolve().parent.parent

STACK_FILES = {
    "terraform_s3": ["variables.tf", "main.tf", "outputs.tf"],
    "k8s_webapp":   ["deployment.yaml", "service.yaml"],
    "terraform_dynamodb": ["variables.tf", "main.tf", "outputs.tf"],
}

STABLE_HEADER_TF   = "// generated by genai_codegen.py (stable header)\n"
STABLE_HEADER_YAML = "# generated by genai_codegen.py (stable header)\n"

def read_text(p: pathlib.Path) -> str:
    return p.read_text(encoding="utf-8")

def write_text(p: pathlib.Path, s: str) -> None:
    p.parent.mkdir(parents=True, exist_ok=True)
    p.write_text(s, encoding="utf-8")

def render_from_templates(stack: str) -> dict:
    tdir = ROOT / "templates" / stack
    files = STACK_FILES[stack]
    out = {}
    for fname in files:
        src = tdir / fname
        body = read_text(src)
        header = STABLE_HEADER_TF if fname.endswith(".tf") else STABLE_HEADER_YAML
        out[fname] = header + body
    return out

def ollama_run(model: str, prompt_path: pathlib.Path) -> str:
    prompt = read_text(prompt_path)
    proc = subprocess.run(["ollama", "run", model],
                          input=prompt.encode("utf-8"),
                          stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if proc.returncode != 0:
        sys.stderr.write(proc.stderr.decode("utf-8"))
        sys.exit(proc.returncode)
    return proc.stdout.decode("utf-8").strip()

def parse_three_blocks(text: str) -> dict:
    # Expect <<<variables.tf ... >>> etc., tolerant to whitespace
    blocks = {}
    pattern = re.compile(r"<<<(variables\.tf|main\.tf|outputs\.tf)\s*(.*?)\s*>>>", re.DOTALL | re.IGNORECASE)
    for name, body in pattern.findall(text):
        # normalize exact filenames
        key = name.lower()
        blocks[key] = body.strip() + "\n"
    required = ["variables.tf", "main.tf", "outputs.tf"]
    if not all(k in blocks for k in required):
        sys.stderr.write("Model output missing one or more required blocks (variables.tf, main.tf, outputs.tf).\n")
        sys.exit(2)
    return {
        "variables.tf": STABLE_HEADER_TF + blocks["variables.tf"],
        "main.tf":      STABLE_HEADER_TF + blocks["main.tf"],
        "outputs.tf":   STABLE_HEADER_TF + blocks["outputs.tf"],
    }

def ollama_generate(stack: str, model: str, prompt_path: pathlib.Path) -> dict:
    if stack == "k8s_webapp":
        # expect two YAML docs separated by '---'
        out = ollama_run(model, prompt_path)
        parts = [p.strip() for p in out.split("\n---\n") if p.strip()]
        if len(parts) != 2:
            sys.stderr.write("Expected exactly two YAML documents from model.\n")
            sys.exit(2)
        return {
            "deployment.yaml": STABLE_HEADER_YAML + parts[0] + "\n",
            "service.yaml":    STABLE_HEADER_YAML + parts[1] + "\n",
        }
    elif stack in ("terraform_s3", "terraform_dynamodb"):
        out = ollama_run(model, prompt_path)
        return parse_three_blocks(out)
    else:
        sys.stderr.write(f"Ollama engine not supported for stack: {stack}\n")
        sys.exit(2)

def main():
    ap = argparse.ArgumentParser(description="Cost-safe prompt â†’ files generator")
    ap.add_argument("--prompt", required=True, help="Path to prompt file")
    ap.add_argument("--out", default=".", help="Output directory")
    ap.add_argument("--stack", default="terraform_s3", choices=list(STACK_FILES.keys()))
    ap.add_argument("--engine", default="template", choices=["template","ollama"])
    ap.add_argument("--model", default="mistral")
    ap.add_argument("--check", action="store_true", help="Exit non-zero if generated content differs")
    a = ap.parse_args()

    prompt_path = pathlib.Path(a.prompt)
    if not prompt_path.exists():
        print(f"Prompt not found: {prompt_path}", file=sys.stderr); sys.exit(2)

    if a.engine == "template":
        outputs = render_from_templates(a.stack)
    else:
        outputs = ollama_generate(a.stack, a.model, prompt_path)

    out_dir = pathlib.Path(a.out); out_dir.mkdir(parents=True, exist_ok=True)
    changed = False
    for fname, content in outputs.items():
        dest = out_dir / fname
        current = dest.read_text(encoding="utf-8") if dest.exists() else None
        if current != content:
            changed = True
            if a.check:
                print(f"[DIFF] {dest} would change", file=sys.stderr)
            else:
                write_text(dest, content); print(f"[WRITE] {dest}")
    if a.check and changed: sys.exit(3)

if __name__ == "__main__":
    main()
