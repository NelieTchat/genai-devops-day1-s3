#!/usr/bin/env python3
import argparse, pathlib, sys

ROOT = pathlib.Path(__file__).resolve().parent.parent

STACK_FILES = {
    "terraform_s3": ["variables.tf", "main.tf", "outputs.tf"],
    "k8s_webapp":   ["deployment.yaml", "service.yaml"],
}

STABLE_HEADER_TF   = "// generated by genai_codegen.py (stable header)\n"
STABLE_HEADER_YAML = "# generated by genai_codegen.py (stable header)\n"

def read_text(p: pathlib.Path) -> str:
    return p.read_text(encoding="utf-8")

def write_text(p: pathlib.Path, s: str) -> None:
    p.parent.mkdir(parents=True, exist_ok=True)
    p.write_text(s, encoding="utf-8")

def render_from_templates(stack: str) -> dict:
    tdir = ROOT / "templates" / stack
    if not tdir.exists():
        raise SystemExit(f"Template folder not found: {tdir}")
    files = STACK_FILES.get(stack)
    if not files:
        raise SystemExit(f"Unknown stack: {stack}")

    out = {}
    for fname in files:
        src = tdir / fname
        if not src.exists():
            raise SystemExit(f"Missing template for {stack}: {src}")
        body = read_text(src)
        header = STABLE_HEADER_TF if fname.endswith(".tf") else STABLE_HEADER_YAML
        out[fname] = header + body
    return out

def main():
    ap = argparse.ArgumentParser(description="Cost-safe prompt â†’ files generator")
    ap.add_argument("--prompt", required=True, help="Path to prompt file (for provenance only)")
    ap.add_argument("--out", default=".", help="Output directory")
    ap.add_argument("--stack", default="terraform_s3", choices=list(STACK_FILES.keys()))
    ap.add_argument("--check", action="store_true", help="Exit non-zero if generated content differs")
    a = ap.parse_args()

    prompt_path = pathlib.Path(a.prompt)
    if not prompt_path.exists():
        print(f"Prompt not found: {prompt_path}", file=sys.stderr)
        sys.exit(2)

    outputs = render_from_templates(a.stack)

    out_dir = pathlib.Path(a.out)
    out_dir.mkdir(parents=True, exist_ok=True)

    changed = False
    for fname, content in outputs.items():
        dest = out_dir / fname
        current = dest.read_text(encoding="utf-8") if dest.exists() else None
        if current != content:
            changed = True
            if a.check:
                print(f"[DIFF] {dest} would change", file=sys.stderr)
            else:
                write_text(dest, content)
                print(f"[WRITE] {dest}")

    if a.check and changed:
        sys.exit(3)

if __name__ == "__main__":
    main()
