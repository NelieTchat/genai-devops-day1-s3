#!/usr/bin/env python3
import argparse, pathlib, sys
from datetime import datetime

ROOT = pathlib.Path(__file__).resolve().parent.parent
TEMPLATES = ROOT / "templates" / "terraform_s3"
FILES = ["variables.tf", "main.tf", "outputs.tf"]

def read_text(p): return p.read_text(encoding="utf-8")
def write_text(p, s): p.parent.mkdir(parents=True, exist_ok=True); p.write_text(s, encoding="utf-8")

def render_engine(prompt_text: str) -> dict:
    out = {}
    for fname in FILES:
        tpl = TEMPLATES / fname
        out[fname] = read_text(tpl)
    stamp = f"// generated by genai_codegen.py @ {datetime.utcnow().isoformat()}Z\n"
    return {k: stamp + v for k, v in out.items()}

def main():
    ap = argparse.ArgumentParser(description="Cost-safe prompt â†’ files generator")
    ap.add_argument("--prompt", required=True)
    ap.add_argument("--out", default=".")
    ap.add_argument("--check", action="store_true")
    a = ap.parse_args()

    prompt_path = pathlib.Path(a.prompt)
    if not prompt_path.exists():
        print(f"Prompt not found: {prompt_path}", file=sys.stderr); sys.exit(2)
    outputs = render_engine(read_text(prompt_path))

    out_dir = pathlib.Path(a.out); out_dir.mkdir(parents=True, exist_ok=True)
    changed = False
    for fname, content in outputs.items():
        dest = out_dir / fname
        current = dest.read_text(encoding="utf-8") if dest.exists() else None
        if current != content:
            changed = True
            if a.check:
                print(f"[DIFF] {dest} would change", file=sys.stderr)
            else:
                write_text(dest, content); print(f"[WRITE] {dest}")
    if a.check and changed: sys.exit(3)

if __name__ == "__main__":
    main()
